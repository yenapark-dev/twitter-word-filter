{"version":3,"sources":["components/TwitteGroup.js/index.js","services/axios-client.js","services/api.js","components/SearchBar/index.jsx","App.js","index.js"],"names":["TwitteGroup","props","tweetData","data","idx","className","title","keyword","bordered","style","width","backgroundColor","id","height","overflow","padding","border","dataLength","length","next","hasMore","loader","paragraph","rows","active","endMessage","plain","scrollableTarget","dataSource","grid","gutter","xs","sm","md","lg","xl","xxl","renderItem","item","index","Item","text","Meta","description","retweet","favorite","instance","axios","create","baseURL","fetchTwitter","a","post","TextArea","Input","SearchArea","Form","useForm","form","useState","twiteData","setTwiteData","loading","setLoading","handleSubmit","values","res","message","error","name","onFinish","labelCol","span","wrapperCol","layout","size","label","rules","required","showCount","autoSize","minRows","maxRows","allowClear","placeholder","offset","htmlType","block","icon","SearchOutlined","type","borderRadius","boxShadow","fontSize","map","twit","App","SearchBar","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.81c24ef5.chunk.js","sourcesContent":["// Import ant design  components\nimport React from 'react';\nimport { List, Skeleton, Divider, Card } from 'antd';\nimport InfiniteScroll from 'react-infinite-scroll-component';\n\n// Import style sheets\nimport './styles.css';\nconst TwitteGroup = (props) => {\n  const { data: tweetData, idx } = props;\n\n  return (\n    <div className='twitte-card'>\n      <Card\n        title={idx + 1 + ': ' + props.data[1].keyword}\n        bordered={false}\n        style={{ width: '100%', backgroundColor: 'rgba(245,186,19, 0.20)' }}\n      >\n        <div\n          id='scrollableDiv'\n          style={{\n            height: 400,\n            overflow: 'auto',\n            padding: '0 16px',\n            border: '1px solid rgba(140, 140, 140, 0.35)',\n            backgroundColor: 'white',\n          }}\n        >\n          <InfiniteScroll\n            dataLength={tweetData.length}\n            next={tweetData}\n            hasMore={tweetData.length < 30}\n            loader={<Skeleton paragraph={{ rows: 1 }} active />}\n            endMessage={<Divider plain>It is all, nothing more ü§ê</Divider>}\n            scrollableTarget='scrollableDiv'\n          >\n            <List\n              dataSource={tweetData}\n              grid={{\n                gutter: 16,\n                xs: 1,\n                sm: 2,\n                md: 3,\n                lg: 3,\n                xl: 3,\n                xxl: 5,\n              }}\n              style={{}}\n              renderItem={(item, index) => (\n                <List.Item key={index}>\n                  {item.text ? (\n                    <List.Item.Meta\n                      title={item.text}\n                      description={`${item.retweet} Retweet ${item.favorite} Like`}\n                    />\n                  ) : null}\n                </List.Item>\n              )}\n            />\n          </InfiniteScroll>\n        </div>\n      </Card>\n    </div>\n  );\n};\n\nexport default TwitteGroup;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'http://localhost:8081/api',\n});\n\nexport default instance;\n","import axios from './axios-client';\n\nexport const fetchTwitter = async (data) => {\n  return await axios.post('/twitter', data);\n};\n","// Import libary\nimport React, { useState } from 'react';\n\n// Import ant design  components\nimport { Button, Input, message, Spin, Form } from 'antd';\nimport { SearchOutlined } from '@ant-design/icons';\n\n// Import componets\nimport TwitteGroup from '../TwitteGroup.js';\n// Import Services\nimport { fetchTwitter } from '../../services/api';\n\n// Import style sheets\nimport './style.css';\n\nconst { TextArea } = Input;\nconst SearchArea = (props) => {\n  const [form] = Form.useForm();\n  const [twiteData, setTwiteData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const layout = {\n    labelCol: { span: 24 },\n    wrapperCol: { span: 24 },\n  };\n\n  const handleSubmit = async (values) => {\n    const { text } = values;\n    try {\n      setLoading(true);\n\n      const res = await fetchTwitter({ data: text });\n      const { data } = res || {};\n      setTwiteData(data);\n    } catch (error) {\n      message.error(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div>\n      <div className='search-area'>\n        <Form\n          form={form}\n          name='search-form'\n          onFinish={handleSubmit}\n          {...layout}\n          layout='vertical'\n          size='large'\n        >\n          <Form.Item\n            name='text'\n            label='Text'\n            rules={[{ required: true }]}\n            required\n          >\n            <TextArea\n              showCount\n              autoSize={{ minRows: 3, maxRows: 6 }}\n              allowClear\n              placeholder='Enter the text you want to search here'\n              bordered='false'\n              style={{ border: ' 2px solid #f5ba13' }}\n            />\n          </Form.Item>\n          <Form.Item wrapperCol={{ offset: 18, span: 6 }}>\n            <Button\n              htmlType='submit'\n              block\n              icon={<SearchOutlined />}\n              size='large'\n              type='text'\n              style={{\n                height: '60px',\n                borderRadius: '7px',\n                boxShadow: '0 1px 5px rgb(138, 137, 137) ',\n                backgroundColor: ' #f5ba13',\n                fontSize: '1.2em',\n              }}\n            >\n              Search\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n      <div>\n        {loading ? (\n          <Spin />\n        ) : (\n          twiteData.length > 0 &&\n          twiteData.map((twit, idx) => <TwitteGroup data={twit} idx={idx} />)\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SearchArea;\n","// Import libray\nimport React from 'react';\n\n// Import ant design style sheet\nimport 'antd/dist/antd.css';\n\n// Import components\nimport SearchBar from './components/SearchBar';\n\n// Import style sheet\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <div className='Intro'>\n        <h1>Twitter Filter Engine</h1>\n        <p>\n          Cloud-based query processor based on Twitter messages. It will allow\n          user to enter multiple queries based on ‚Äúhashtags‚Äù. With the data\n          collected, the app will utilise NLP to do sentiment analysis to find\n          the most related keywords related to the queries and visualise it with\n          word cloud. The query will remain active until it is manually revoked\n          by the user.\n        </p>\n      </div>\n      <SearchBar />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}